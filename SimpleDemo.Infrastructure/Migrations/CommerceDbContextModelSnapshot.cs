// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleDemo.Infrastructure.Repository;

#nullable disable

namespace SimpleDemo.Infrastructure.Migrations
{
    [DbContext(typeof(CommerceDbContext))]
    partial class CommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.CommerceEntity.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NickName");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a8a95945c3c94fb1a677aa6394d3ee01",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2216), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@domain.com",
                            Name = "Admin",
                            NickName = "Judy",
                            Password = "Admin",
                            RoleId = "356948299a4e4daeb3eb6ef16f2e082b"
                        },
                        new
                        {
                            Id = "0610d93676b14cd799e64254e347a49a",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2221), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "visitor@domain.com",
                            Name = "Visitor",
                            NickName = "Hellen",
                            Password = "Hellen",
                            RoleId = "356948299a4e4daeb3eb6ef16f2e082b"
                        });
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.LogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("Level");

                    b.HasIndex("Title");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.PermissionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Label");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11fc9285577043f4bd31b662b848eb64",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2149), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "FullAccess access for permission.",
                            Label = "Permission.FullAccess",
                            RoleId = "356948299a4e4daeb3eb6ef16f2e082b"
                        },
                        new
                        {
                            Id = "a44531e21c12495c8c8d6e5946c438df",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2153), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "FullAccess access for user.",
                            Label = "User.FullAccess",
                            RoleId = "356948299a4e4daeb3eb6ef16f2e082b"
                        },
                        new
                        {
                            Id = "bc5d773f947042f3a007c8040736f5b1",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2186), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Read the user self data.",
                            Label = "User.Read",
                            RoleId = "7960226b50474667bce3f9ec9c9e8a11"
                        });
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "356948299a4e4daeb3eb6ef16f2e082b",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2117), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "7960226b50474667bce3f9ec9c9e8a11",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 16, 8, 49, 38, 812, DateTimeKind.Unspecified).AddTicks(2122), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Visitor",
                            Name = "Visitor"
                        });
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.CommerceEntity.UserEntity", b =>
                {
                    b.HasOne("SimpleDemo.Domain.DbEntity.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.PermissionEntity", b =>
                {
                    b.HasOne("SimpleDemo.Domain.DbEntity.RoleEntity", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.RoleEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
