// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleDemo.Infrastructure.Repository;

#nullable disable

namespace SimpleDemo.Infrastructure.Migrations
{
    [DbContext(typeof(CommerceDbContext))]
    [Migration("20240910142804_InitCommerceDatabase")]
    partial class InitCommerceDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.CommerceEntity.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NickName");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eb7c2bced0f544f8990d3db8b03a9468",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8664), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@domain.com",
                            Name = "Admin",
                            NickName = "Judy",
                            Password = "Admin",
                            RoleId = "e5c937f8008341459823324edc21c4d2"
                        },
                        new
                        {
                            Id = "3b63e730f3a94f04a236d83fc6e49da1",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8670), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "visitor@domain.com",
                            Name = "Visitor",
                            NickName = "Hellen",
                            Password = "Hellen",
                            RoleId = "e5c937f8008341459823324edc21c4d2"
                        });
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.LogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("Level");

                    b.HasIndex("Title");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.PermissionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Label");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d1a6c5fdcbd044a18d646c18a157cd29",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8616), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Full access for permission.",
                            Label = "Permission.Full",
                            RoleId = "e5c937f8008341459823324edc21c4d2"
                        },
                        new
                        {
                            Id = "aaee094758984331a9ea3fbeb01274ba",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8629), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Full access for user.",
                            Label = "Permission.Full",
                            RoleId = "e5c937f8008341459823324edc21c4d2"
                        },
                        new
                        {
                            Id = "ebb3d124da194877b7626d4597542ec4",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8631), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Read the user self data.",
                            Label = "User.Read",
                            RoleId = "600b8e0b5bbc4b23a1e781311ef00e49"
                        });
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e5c937f8008341459823324edc21c4d2",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8582), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "600b8e0b5bbc4b23a1e781311ef00e49",
                            CreatedBy = "Application",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 9, 10, 14, 28, 4, 122, DateTimeKind.Unspecified).AddTicks(8587), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Visitor",
                            Name = "Visitor"
                        });
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.CommerceEntity.UserEntity", b =>
                {
                    b.HasOne("SimpleDemo.Domain.DbEntity.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.PermissionEntity", b =>
                {
                    b.HasOne("SimpleDemo.Domain.DbEntity.RoleEntity", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SimpleDemo.Domain.DbEntity.RoleEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
